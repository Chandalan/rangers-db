# import Deck from 'fragments.graphql'

query getDecksPageData(
  $locale: String
) {
  roleCards: rangers_card_localized(
    where: {
      locale: { _eq: $locale }}
  ) {
    ...Card
  }
}

mutation upgradeDeck(
  $deckId: Int!
) {
  deck: rangers_upgrade_deck(args: {
    deck_id: $deckId,
    upgrade_data: {}
  }) {
    next_deck_id
  }
}

query getMyDecks(
  $userId: String!,
  $limit: Int!,
  $offset: Int!
) {
  decks: rangers_deck(
    where: {
      user_id: { _eq: $userId }
      next_deck_id: { _is_null: true }
    }
    order_by: { updated_at: desc, id: asc }
    limit: $limit
    offset: $offset
  ) {
    ...Deck
  }
}

query getMyDecksTotal(
  $userId: String!
) {
  total: rangers_deck_aggregate(
    where: { user_id: { _eq: $userId }}
  ) {
    aggregate {
      count
    }
  }
}

query getDeck(
  $deckId: Int!
) {
  deck: rangers_deck_by_pk(id: $deckId) {
    ...Deck
    user {
      handle
    }
  }
}

mutation createDeck(
  $name: String!,
  $foc: Int!,
  $fit: Int!,
  $awa: Int!,
  $spi: Int!,
  $meta: jsonb!,
  $slots: jsonb!,
) {
  deck: insert_rangers_deck_one(
    object: {
      name: $name
      foc: $foc
      fit: $fit
      awa: $awa
      spi: $spi
      meta: $meta
      slots: $slots
    }
  ) {
    ...Deck
  }
}

mutation deleteDeck(
  $id: Int!
) {
  delete_rangers_deck_by_pk(id: $id) {
    id
  }
}

mutation saveDeck(
  $id: Int!,
  $name: String!,
  $foc: Int!,
  $fit: Int!,
  $awa: Int!,
  $spi: Int!,
  $meta: jsonb!,
  $slots: jsonb!
) {
  update_rangers_deck_by_pk(
    pk_columns: { id: $id }
    _set: {
      name: $name,
      foc: $foc,
      fit: $fit,
      awa: $awa,
      spi: $spi,
      meta: $meta,
      slots: $slots
    }
  ) {
    ...Deck
  }
}
